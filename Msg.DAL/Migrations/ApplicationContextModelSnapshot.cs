// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Msg.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Msg.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Msg.Core.BasicModels.DataPiece", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DevicePackId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PackId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DevicePackId");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceDataPiece", b =>
                {
                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataPieceId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("DeviceId", "DataPieceId");

                    b.HasIndex("DataPieceId");

                    b.ToTable("DeviceDataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceInPack", b =>
                {
                    b.Property<long>("PackTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasKey("PackTypeId", "DeviceTypeId");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("DevicesInPacks");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DevicePack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("DateBought")
                        .HasColumnType("date");

                    b.Property<long>("PackTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PackTypeId");

                    b.ToTable("DevicePacks");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PackType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PackTypes");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Plant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PlantDataPiece", b =>
                {
                    b.Property<long>("PlantId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataPieceId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("PlantId", "DataPieceId");

                    b.HasIndex("DataPieceId");

                    b.ToTable("PlantDataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Substrate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Substrates");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.SubstrateDataPiece", b =>
                {
                    b.Property<long>("SubstrateId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataPieceId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("SubstrateId", "DataPieceId");

                    b.HasIndex("DataPieceId");

                    b.ToTable("SubstrateDataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Device", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DevicePack", "DevicePack")
                        .WithMany("Devices")
                        .HasForeignKey("DevicePackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DevicePack");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceDataPiece", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DataPiece", "DataPiece")
                        .WithMany("DeviceDataPieces")
                        .HasForeignKey("DataPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Device", "Device")
                        .WithMany("DataPieces")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPiece");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceInPack", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DeviceType", "DeviceType")
                        .WithMany("DeviceInPacks")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.PackType", "PackType")
                        .WithMany("DevicesInPack")
                        .HasForeignKey("PackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");

                    b.Navigation("PackType");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DevicePack", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.PackType", "PackType")
                        .WithMany("DevicePacks")
                        .HasForeignKey("PackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackType");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PlantDataPiece", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DataPiece", "DataPiece")
                        .WithMany("PlantDataPieces")
                        .HasForeignKey("DataPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Plant", "Plant")
                        .WithMany("Characteristics")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPiece");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.SubstrateDataPiece", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DataPiece", "DataPiece")
                        .WithMany("SubstrateDataPieces")
                        .HasForeignKey("DataPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Substrate", "Substrate")
                        .WithMany("Characteristics")
                        .HasForeignKey("SubstrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPiece");

                    b.Navigation("Substrate");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DataPiece", b =>
                {
                    b.Navigation("DeviceDataPieces");

                    b.Navigation("PlantDataPieces");

                    b.Navigation("SubstrateDataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Device", b =>
                {
                    b.Navigation("DataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DevicePack", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceType", b =>
                {
                    b.Navigation("DeviceInPacks");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PackType", b =>
                {
                    b.Navigation("DevicePacks");

                    b.Navigation("DevicesInPack");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Plant", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Substrate", b =>
                {
                    b.Navigation("Characteristics");
                });
#pragma warning restore 612, 618
        }
    }
}
