// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Msg.DAL;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Msg.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230419143140_RealNewSeedings")]
    partial class RealNewSeedings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.2.23128.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Blend", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Blends");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.BlendComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BlendId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubstrateId")
                        .HasColumnType("bigint");

                    b.Property<double>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("BlendId");

                    b.HasIndex("SubstrateId");

                    b.ToTable("BlendComponents");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DataLabel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataLabels");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Label = "PlantRequired"
                        },
                        new
                        {
                            Id = 2L,
                            Label = "SubstrateRequired"
                        },
                        new
                        {
                            Id = 3L,
                            Label = "OptimizingModelRequired"
                        },
                        new
                        {
                            Id = 4L,
                            Label = "DeviceActionRequired"
                        },
                        new
                        {
                            Id = 5L,
                            Label = "Optional"
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DataLabelDataPiece", b =>
                {
                    b.Property<long>("DataLabelId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataPieceId")
                        .HasColumnType("bigint");

                    b.HasKey("DataLabelId", "DataPieceId");

                    b.HasIndex("DataPieceId");

                    b.ToTable("DataLabelDataPiece");

                    b.HasData(
                        new
                        {
                            DataLabelId = 1L,
                            DataPieceId = 1L
                        },
                        new
                        {
                            DataLabelId = 2L,
                            DataPieceId = 1L
                        },
                        new
                        {
                            DataLabelId = 3L,
                            DataPieceId = 1L
                        },
                        new
                        {
                            DataLabelId = 4L,
                            DataPieceId = 1L
                        },
                        new
                        {
                            DataLabelId = 1L,
                            DataPieceId = 2L
                        },
                        new
                        {
                            DataLabelId = 2L,
                            DataPieceId = 2L
                        },
                        new
                        {
                            DataLabelId = 3L,
                            DataPieceId = 2L
                        },
                        new
                        {
                            DataLabelId = 4L,
                            DataPieceId = 2L
                        },
                        new
                        {
                            DataLabelId = 1L,
                            DataPieceId = 3L
                        },
                        new
                        {
                            DataLabelId = 2L,
                            DataPieceId = 3L
                        },
                        new
                        {
                            DataLabelId = 3L,
                            DataPieceId = 3L
                        },
                        new
                        {
                            DataLabelId = 4L,
                            DataPieceId = 3L
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DataPiece", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataPieces");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            MeasureUnit = "pH",
                            Name = "Acidity"
                        },
                        new
                        {
                            Id = 2L,
                            MeasureUnit = "mS cm",
                            Name = "Electrical Capacity"
                        },
                        new
                        {
                            Id = 3L,
                            MeasureUnit = "%",
                            Name = "Moisure Content"
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Device", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DevicePackId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DevicePackId");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("PlantId");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DevicePackId = 1L,
                            DeviceTypeId = 1L,
                            PlantId = 1L
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceDataPiece", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("DataPieceId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<long?>("WarningId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataPieceId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("WarningId");

                    b.ToTable("DeviceDataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceInPack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<long>("DeviceTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PackTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.HasIndex("PackTypeId");

                    b.ToTable("DevicesInPacks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Amount = 4,
                            DeviceTypeId = 1L,
                            PackTypeId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Amount = 6,
                            DeviceTypeId = 1L,
                            PackTypeId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Amount = 2,
                            DeviceTypeId = 2L,
                            PackTypeId = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Amount = 6,
                            DeviceTypeId = 1L,
                            PackTypeId = 3L
                        },
                        new
                        {
                            Id = 5L,
                            Amount = 5,
                            DeviceTypeId = 2L,
                            PackTypeId = 3L
                        },
                        new
                        {
                            Id = 6L,
                            Amount = 2,
                            DeviceTypeId = 3L,
                            PackTypeId = 3L
                        },
                        new
                        {
                            Id = 7L,
                            Amount = 10,
                            DeviceTypeId = 1L,
                            PackTypeId = 4L
                        },
                        new
                        {
                            Id = 8L,
                            Amount = 10,
                            DeviceTypeId = 2L,
                            PackTypeId = 4L
                        },
                        new
                        {
                            Id = 9L,
                            Amount = 4,
                            DeviceTypeId = 3L,
                            PackTypeId = 4L
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DevicePack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("DateBought")
                        .HasColumnType("date");

                    b.Property<long>("PackTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PackTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("DevicePacks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateBought = new DateOnly(2023, 4, 19),
                            PackTypeId = 1L,
                            UserId = "b74ddd14-6340-4840-95c2-db12554843e5"
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "MSG Logger I is a smart device that analyzes substrates and provides detailed information about their composition, helping users make informed decisions about their usage and handling.",
                            Name = "MSG Logger I"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "MSG Logger II is a smart device that designed to analyze the substrate, providing detailed information about its composition and properties, allowing for better decision-making and optimization of processes.",
                            Name = "MSG Logger II"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "MSG Logger III is a substrate analysis smart device uses sensors to provide real-time data on the quality and composition of soil or other substrates for optimized plant growth.",
                            Name = "MSG Logger III"
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("PackTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PackTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PackType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("PackTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "This tiny bundle of smart devices is a collection of small, interconnected devices that work together to provide various functionalities such as monitoring, tracking, and controlling. Despite their small size, they offer great convenience and versatility for a wide range of applications.",
                            Name = "Basic bundle",
                            Price = 10.0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "The medium-sized bundle of smart devices includes a variety of tools that can be used for monitoring and controlling various aspects of a project. These devices can communicate with each other and with a central hub, providing real-time data and insights for project managers.",
                            Name = "Mid bundle",
                            Price = 22.0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "An advanced bundle of smart devices consists of highly sophisticated and interconnected devices that utilize cutting-edge technologies to enhance automation, productivity, and efficiency in various industries. These devices can be customized to fit specific needs and can communicate and exchange data with each other, leading to optimized performance and decision-making.",
                            Name = "Advansed bundle",
                            Price = 45.0
                        },
                        new
                        {
                            Id = 4L,
                            Description = "The professional bundle of smart devices is a comprehensive set of tools designed for advanced data collection and analysis. It includes high-quality sensors, data loggers, and software for precise and accurate measurement in various industries, including scientific research, engineering, and manufacturing.",
                            Name = "Professional bundle",
                            Price = 99.0
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Plant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Regular beens",
                            Name = "Beens"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Regular cucumber",
                            Name = "Cucumber"
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PlantDataPiece", b =>
                {
                    b.Property<long>("PlantId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataPieceId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("PlantId", "DataPieceId");

                    b.HasIndex("DataPieceId");

                    b.ToTable("PlantDataPieces");

                    b.HasData(
                        new
                        {
                            PlantId = 1L,
                            DataPieceId = 1L,
                            Value = 6.0
                        },
                        new
                        {
                            PlantId = 1L,
                            DataPieceId = 2L,
                            Value = 0.90000000000000002
                        },
                        new
                        {
                            PlantId = 1L,
                            DataPieceId = 3L,
                            Value = 35.0
                        },
                        new
                        {
                            PlantId = 2L,
                            DataPieceId = 1L,
                            Value = 6.2999999999999998
                        },
                        new
                        {
                            PlantId = 2L,
                            DataPieceId = 2L,
                            Value = 0.69999999999999996
                        },
                        new
                        {
                            PlantId = 2L,
                            DataPieceId = 3L,
                            Value = 48.0
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Substrate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<double?>("Volume")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Substrates");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "GT1  (30%  sand  +20% organic  soil +  50% coco  coir)",
                            Name = "GT1",
                            Price = 4.0,
                            Volume = 2.0
                        },
                        new
                        {
                            Id = 2L,
                            Description = "GT2  (75%  coco  coir  +  25% rice husk)",
                            Name = "GT2",
                            Price = 14.0,
                            Volume = 5.0
                        },
                        new
                        {
                            Id = 3L,
                            Description = "GT3  (75% coco coir + CaO 2.2 mg/kg + acid humic 0.41%)",
                            Name = "GT3",
                            Price = 13.99,
                            Volume = 3.5
                        },
                        new
                        {
                            Id = 4L,
                            Description = "GT4  (75% white sphagnum peat  +25% vermiculite (size  4–6  mm))",
                            Name = "GT4",
                            Price = 18.0,
                            Volume = 6.0
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.SubstrateDataPiece", b =>
                {
                    b.Property<long>("SubstrateId")
                        .HasColumnType("bigint");

                    b.Property<long>("DataPieceId")
                        .HasColumnType("bigint");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("SubstrateId", "DataPieceId");

                    b.HasIndex("DataPieceId");

                    b.ToTable("SubstrateDataPieces");

                    b.HasData(
                        new
                        {
                            SubstrateId = 1L,
                            DataPieceId = 1L,
                            Value = 6.2000000000000002
                        },
                        new
                        {
                            SubstrateId = 1L,
                            DataPieceId = 2L,
                            Value = 1.3999999999999999
                        },
                        new
                        {
                            SubstrateId = 1L,
                            DataPieceId = 3L,
                            Value = 48.0
                        },
                        new
                        {
                            SubstrateId = 2L,
                            DataPieceId = 1L,
                            Value = 6.0
                        },
                        new
                        {
                            SubstrateId = 2L,
                            DataPieceId = 2L,
                            Value = 0.40000000000000002
                        },
                        new
                        {
                            SubstrateId = 2L,
                            DataPieceId = 3L,
                            Value = 38.0
                        },
                        new
                        {
                            SubstrateId = 3L,
                            DataPieceId = 1L,
                            Value = 6.5
                        },
                        new
                        {
                            SubstrateId = 3L,
                            DataPieceId = 2L,
                            Value = 0.80000000000000004
                        },
                        new
                        {
                            SubstrateId = 3L,
                            DataPieceId = 3L,
                            Value = 55.0
                        },
                        new
                        {
                            SubstrateId = 4L,
                            DataPieceId = 1L,
                            Value = 6.2000000000000002
                        },
                        new
                        {
                            SubstrateId = 4L,
                            DataPieceId = 2L,
                            Value = 0.59999999999999998
                        },
                        new
                        {
                            SubstrateId = 4L,
                            DataPieceId = 3L,
                            Value = 41.0
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db12554843e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e4e639e-e733-4a04-ba4d-f1db470a1dbe",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPAyI5k3RzgSpj1EGvuFYUIYOt4EpG3phgUMfEivdONMxjZxbke44CIcLLrCItnj8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a657e80-97d3-4d85-a4f0-8954093e7189",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Warning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsSolved")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Warnings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Blend", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.User", "User")
                        .WithMany("Blends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.BlendComponent", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.Blend", "Blend")
                        .WithMany("Components")
                        .HasForeignKey("BlendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Substrate", "Substrate")
                        .WithMany()
                        .HasForeignKey("SubstrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blend");

                    b.Navigation("Substrate");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DataLabelDataPiece", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DataLabel", "DataLabel")
                        .WithMany("DataLabelDataPieces")
                        .HasForeignKey("DataLabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.DataPiece", "DataPiece")
                        .WithMany("DataLabelDataPieces")
                        .HasForeignKey("DataPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataLabel");

                    b.Navigation("DataPiece");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Device", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DevicePack", "DevicePack")
                        .WithMany("Devices")
                        .HasForeignKey("DevicePackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.DeviceType", "DeviceType")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId");

                    b.Navigation("DevicePack");

                    b.Navigation("DeviceType");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceDataPiece", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DataPiece", "DataPiece")
                        .WithMany("DeviceDataPieces")
                        .HasForeignKey("DataPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Device", "Device")
                        .WithMany("DataPieces")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Warning", "Warning")
                        .WithMany("DeviceDataPieces")
                        .HasForeignKey("WarningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPiece");

                    b.Navigation("Device");

                    b.Navigation("Warning");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceInPack", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DeviceType", "DeviceType")
                        .WithMany("DeviceInPacks")
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.PackType", "PackType")
                        .WithMany("DevicesInPack")
                        .HasForeignKey("PackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");

                    b.Navigation("PackType");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DevicePack", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.PackType", "PackType")
                        .WithMany("DevicePacks")
                        .HasForeignKey("PackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.User", "User")
                        .WithMany("DevicePacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Order", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.PackType", "PackType")
                        .WithMany("Orders")
                        .HasForeignKey("PackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("PackType");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PlantDataPiece", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DataPiece", "DataPiece")
                        .WithMany("PlantDataPieces")
                        .HasForeignKey("DataPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Plant", "Plant")
                        .WithMany("Characteristics")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPiece");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.SubstrateDataPiece", b =>
                {
                    b.HasOne("Msg.Core.BasicModels.DataPiece", "DataPiece")
                        .WithMany("SubstrateDataPieces")
                        .HasForeignKey("DataPieceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Msg.Core.BasicModels.Substrate", "Substrate")
                        .WithMany("Characteristics")
                        .HasForeignKey("SubstrateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataPiece");

                    b.Navigation("Substrate");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Blend", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DataLabel", b =>
                {
                    b.Navigation("DataLabelDataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DataPiece", b =>
                {
                    b.Navigation("DataLabelDataPieces");

                    b.Navigation("DeviceDataPieces");

                    b.Navigation("PlantDataPieces");

                    b.Navigation("SubstrateDataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Device", b =>
                {
                    b.Navigation("DataPieces");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DevicePack", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.DeviceType", b =>
                {
                    b.Navigation("DeviceInPacks");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.PackType", b =>
                {
                    b.Navigation("DevicePacks");

                    b.Navigation("DevicesInPack");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Plant", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Substrate", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.User", b =>
                {
                    b.Navigation("Blends");

                    b.Navigation("DevicePacks");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Msg.Core.BasicModels.Warning", b =>
                {
                    b.Navigation("DeviceDataPieces");
                });
#pragma warning restore 612, 618
        }
    }
}
